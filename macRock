# jinie Rock With Mac Book Pro

---

## Python 3.9.0 install 

- [ ] Remove Python : 파이썬 삭제

0. 터미널 - 가상환경을 사용 중이라면 가상환경 끄기

현재 myenv 가상 환경 내에서 python3 명령어가 가리키는 위치는 가상 환경 내의 Python 버전입니다. 따라서, 시스템 전역에 설치된 Python 버전과 관련된 파일을 삭제하기 위해서는 가상 환경을 비활성화하고, 시스템 전역에 설치된 Python을 찾아서 제거해야 합니다.

'''bash
deactivate
'''

1. 시스템 전역 Python 설치 위치 확인:

이 명령어로 설치된 Python 버전 목록을 확인할 수 있습니다.

'''bash
ls /Library/Frameworks/Python.framework/Versions/
'''

2.설치된 Python 버전 삭제:

시스템 전역 Python 버전이 /Library/Frameworks/Python.framework/Versions/ 디렉토리 내에 있는지 확인하고, 정확한 버전을 삭제합니다:

'''bash
sudo rm -rf /Library/Frameworks/Python.framework/Versions/3.x
'''

3.심볼릭 링크 삭제:

/usr/local/bin 디렉토리에서 Python 관련 심볼릭 링크를 삭제합니다:

'''bash
sudo rm /usr/local/bin/python3
sudo rm /usr/local/bin/pip3
'''

- [ ] Install Python 3.9.0 : Python 3.9.0 재설치

1. 직접 공식 사이트에서 설치

https://www.python.org/downloads/release/python-390/

2. 설치 확인:

'''bash
python3.9 --version
'''

---
## 가상환경 재설치

새로운 Python 3.9.0 버전을 설치한 후, 가상 환경을 다시 생성하여 작업을 진행하세요

1.가상환경 생성:

'''bash
python3.9 -m venv myenv
'''

2.가상 환경 활성화:

'''bash
source myenv/bin/activate
'''

3.필요한 패키지 설치:

'''bash
pip install <패키지 이름>
'''

---


- [ ] Path에 추가되었는지 반드시 확인

1. Python 경로 확인

Python 3.9.0이 어떤 경로에서 실행되고 있는지 확인하려면 다음 명령어를 입력합니다:

'''bash
which python3.9
'''

경로가 /Library/Frameworks/Python.framework/Versions/3.9/bin/python3.9 또는 /usr/local/bin/python3.9와 같은 위치를 가리킨다면, PATH가 자동으로 설정된 것입니다.

2. 환경 변수 확인

현재 설정된 PATH를 확인하려면 다음 명령어를 입력합니다:

'''bash
echo $PATH
'''

여기서 /Library/Frameworks/Python.framework/Versions/3.9/bin이 포함되어 있는지 확인합니다.

3. 추가적인 작업-환경 변수 수정

만약 PATH에 포함되지 않았거나, 다른 버전의 Python이 우선시되고 있다면, ~/.zshrc 파일에 경로를 추가하여 PATH를 직접 설정할 수 있습니다.

---

---

- [ ] PIP 설치

Python 3.9.0을 설치한 후, pip는 일반적으로 함께 설치됩니다. 그러나 pip가 없다면 다음 단계를 따라 pip를 설치할 수 있습니다:

1. pip 설치 확인 - 먼저 pip가 이미 설치되어 있는지 확인합니다:

'''bash
pip --version
'''

2. pip 설치 - 만약 pip가 설치되지 않았다면, 다음 명령어로 pip를 설치할 수 있습니다:

a. get-pip.py 스크립트 다운로드 및 실행

(1) get-pip.py 스크립트 다운로드:

'''bash
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
'''

(2) get-pip.py 스크립트 실행:

'''bash
python3.9 get-pip.py
'''

이 명령어는 Python 3.9.0을 사용하여 pip를 설치합니다.

3. 설치 확인 - 설치가 완료되면, pip 버전을 확인하여 제대로 설치되었는지 확인합니다:

'''bash
pip --version
'''

4. 기본 패키지 설치 - pip가 제대로 설치되면, 필요한 패키지를 설치할 수 있습니다. 예를 들어, numpy 패키지를 설치하려면:

'''bash
pip install numpy
'''

---

- [ ] ElevenLabs 설치

ElevenLabs의 API를 사용하는 Python 라이브러리를 설치합니다. 예를 들어, elevenlabs라는 패키지를 사용할 수 있습니다. 다음 명령어로 설치합니다:

'''bash
pip install elevenlabs
'''

---

- [ ] Rust 설치하기

: elevenlabs 패키지를 설치하는 중에 Rust 컴파일러가 필요하다는 에러가 발생했습니다. 이 문제를 해결하려면 Rust를 설치해야 합니다. Rust는 일부 Python 패키지가 빌드될 때 필요한 도구입니다.

1. Rust 설치 도구인 rustup 다운로드 - rustup은 Rust의 설치 및 관리를 도와주는 도구입니다. 터미널에서 다음 명령어를 입력하여 설치합니다:

'''bash
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
'''

1-2. 1번 방식으로 설치 선택

1) Proceed with standard installation (default - just press enter)

2) Customize installation

3) Cancel installation

>1

1-enter로 기본방식으로 설치를 선택

2. 환경 변수 설정 - 설치가 완료되면 Rust의 실행 파일들이 포함된 경로를 PATH에 추가해야 합니다. 설치 과정에서 자동으로 설정되지만, 설정이 필요한 경우 다음 명령어를 입력합니다:

'''bash
source $HOME/.cargo/env
'''

3.환경변수 설정 - 현재 셸에 Rust 환경 변수 적용: 다음 명령어를 실행하여 환경 변수를 현재 셸에 적용합니다:

'''bash
source "$HOME/.cargo/env"
'''

4. Rust 설치 확인 - Rust와 Cargo가 제대로 설치되었는지 확인합니다:

'''bash
rustc --version
cargo --version
'''

4-2. Rust 명령어가 여전히 인식되지 않는다면, Rust 설치가 완료되지 않았거나 환경 변수가 올바르게 설정되지 않았을 수 있습니다. 아래 단계를 따라 확인해 보세요.

(1) 환경 변수 적용 - 현재 셸에서 Rust 환경 변수를 적용합니다:

'''bash
source "$HOME/.cargo/env"
'''

(2) 명령어 확인 - 다시 명령어를 확인해 보세요:

'''bash
rustc --version
cargo --version
'''
(3) 환경 변수 파일 수정 - 만약 명령어가 여전히 인식되지 않는다면, .zshrc 파일에 Rust의 bin 디렉토리를 추가할 수도 있습니다. 파일을 열고, 다음을 추가합니다:

'''bash
export PATH="$HOME/.cargo/bin:$PATH"
'''

(4)파일을 저장하고, 셸을 다시 시작하거나 아래 명령어로 .zshrc를 다시 로드합니다:

'''bash
source ~/.zshrc
'''

(5) Rust 재설치 - 위 방법들이 효과가 없다면, Rust를 다시 설치해 볼 수 있습니다. 설치를 완료한 후, 환경 변수가 올바르게 설정되었는지 확인합니다:

'''bash
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
'''

---

- [ ] ElevenLabs 설치

'''bash
pip install elevenlabs
'''

---

- [ ] 최신버전의 Pillow 설치

'''bash
pip install Pillow
'''

---

- [ ] tkDesigner 설치

'''bash
pip install tkdesigner
'''

---

- [ ] git Clone 이용해서 Figma to Tkinter-Designer 설치

'''bash
git clone https://github.com/ParthJadhav/Tkinter-Designer.git
'''

---

- [ ] 3ff : ffmpeg, ffplay, ffprobe 설치

0. homebrew가 없다면 먼저 설치:

'''bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
'''

1.homebrew 이용한 설치:

'''bash
brew install ffmpeg
'''

2. 3ff 설치되었는지 확인:

'''bash
ffmpeg -version
ffplay -version
ffprobe -version
'''

3. 3ff는 항상 실행시킬 프로젝트 파일 - jinieRock- 과 같은 폴더에 위치시켜야 함:

- 직접 이동

(1)터미널을 열고 ffmpeg가 있는 폴더를 확인합니다:

'''bash
which ffmpeg
'''

혹은

'''bash
locate ffmpeg
'''

---

- [ ] 실행시킬 프로젝트 파일의 위치를 파악하고 같은 폴더에 3ff 이동시키기

0. 폴더가 보이지 않으면 전체 경로 확인 - jinieRockMac 폴더의 정확한 경로를 모를 때는, 전체 경로를 검색해 보세요. 다음 명령어를 사용하여 검색할 수 있습니다:

'''bash
find ~ -type d -name "jinieRockMac"
'''

1. 홈 디렉토리로 이동:

'''bash
cd ~
'''

2.현재 디렉토리에서 폴더 확인:

'''bash
ls
'''

이 명령어로 현재 홈 디렉토리의 파일과 폴더를 나열하여 jinieRockMac 폴더가 있는지 확인하세요.

3.폴더가 보이면 그 경로로 이동:

'''bash
cd jinieRockMac
'''

4.jinieRockMac 폴더 안의 파일들 확인

'''bash
ls -l /Users/seong-uijin/Desktop/kung24/semina2/jinieRockMac
'''

5.파일 이동 확인-파일들이 실제로 이동되었는지 다시 한 번 확인해보세요. 이동 명령어가 제대로 실행되었는지 확인할 수 있습니다.

'''bash
mv /usr/local/bin/ffmpeg /Users/seong-uijin/Desktop/kung24/semina2/jinieRockMac/
mv /usr/local/bin/ffplay /Users/seong-uijin/Desktop/kung24/semina2/jinieRockMac/
mv /usr/local/bin/ffprobe /Users/seong-uijin/Desktop/kung24/semina2/jinieRockMac/
'''

이 명령어는 ffmpeg, ffplay, ffprobe를 /Users/seong-uijin/Desktop/kung24/semina2/jinieRockMac/으로 이동시킵니다.

6. 파일 이동 후 확인 - 파일이 제대로 이동되었는지 확인하려면 다시 한 번 다음 명령어를 사용하세요:

'''bash
ls -l /Users/seong-uijin/Desktop/kung24/semina2/jinieRockMac
'''

이 명령어로 ffmpeg, ffplay, ffprobe가 모두 이동되었는지 확인할 수 있습니다.

6-2 여전히 다른 폴더에 있다면 예를 들어 위치 확인시 다음과 같이 확인되었을 때:

'''bash
(myenv) %n@%m %1~ %# ls -l /usr/local/bin/ffmpeg /usr/local/bin/ffplay /usr/local/bin/ffprobe
lrwxr-xr-x  1 seong-uijin  admin  33  9 10 00:04 /usr/local/bin/ffmpeg -> ../Cellar/ffmpeg/7.0.2/bin/ffmpeg
'''

현재 ffmpeg, ffplay, ffprobe는 /usr/local/bin 폴더에서 심볼릭 링크로 설정되어 있으며, 실제 파일은 /usr/local/Cellar/ffmpeg/7.0.2/bin/ 폴더에 있을 것입니다. 심볼릭 링크는 원본 파일의 위치를 참조합니다.

다음 절차를 통해 실제 파일을 이동시키는 방법을 확인할 수 있습니다:

(1)실제 파일 위치 확인:

'''bash
ls -l /usr/local/Cellar/ffmpeg/7.0.2/bin
'''

이 명령어로 ffmpeg, ffplay, ffprobe가 실제로 있는지 확인할 수 있습니다.

2.파일 이동 - 실제 파일을 이동하려면 다음 명령어를 사용할 수 있습니다:

'''bash
mv /usr/local/Cellar/ffmpeg/7.0.2/bin/ffmpeg /Users/seong-uijin/Desktop/kung24/semina2/jinieRockMac/
mv /usr/local/Cellar/ffmpeg/7.0.2/bin/ffplay /Users/seong-uijin/Desktop/kung24/semina2/jinieRockMac/
mv /usr/local/Cellar/ffmpeg/7.0.2/bin/ffprobe /Users/seong-uijin/Desktop/kung24/semina2/jinieRockMac/
'''

3. 파일이 이동되었는지 확인 - 파일이 제대로 이동되었는지 다시 한 번 확인하세요:

'''bash
ls -l /Users/seong-uijin/Desktop/kung24/semina2/jinieRockMac
'''

이 명령어들은 각각 ffmpeg, ffplay, ffprobe를 jinieRockMac 폴더로 이동시킵니다. 이 작업이 완료된 후, jinieRockMac 폴더에 가서 파일들이 모두 있는지 확인하세요:
잘 이동되었다면 터미널뿐 아니라 실제 노트북 화면상의 jinieRockMac 폴더에서 ffmpeg, ffplay, ffprobe 파일을 눈으로 확일할 수 있습니다.








